(function(){var Enumerable=window.Enumerable=window.$e=function(array){return new Enumerable.fn.init(array);};function parseExpressions(sequence){var tempSequence=new Enumerable(sequence.elements);for(var expressionIndex=0;expressionIndex<sequence.expressions.length;expressionIndex++){var expression=sequence.expressions[expressionIndex];var args=[];args.push(tempSequence);for(var j=0;j<expression.args.length;j++){args.push(expression.args[j]);};tempSequence=expression.func.apply(tempSequence,args);}
return tempSequence;};function ensureEnumerable(object){if(object.elements){return object;}else{return new Enumerable(object);}};function addExpression(sequence,func,arguments){var ret=copy(sequence);ret.expressions.push({func:func,args:arguments});return ret;};function add(sequence,element){sequence.elements.push(element);return sequence;};function addRange(sequence,elements){var thisEnumerable=sequence;var parameterEnumerable=ensureEnumerable(elements);each(parameterEnumerable,function(element){thisEnumerable.elements.push(element);thisEnumerable.length++;});return sequence;};function all(sequence,predicate){var ret=true;for(var i=0;i<sequence.elements.length;i++){if(!predicate(sequence.elements[i],i)){ret=false;break;}}
return ret;};function any(sequence,predicate){var ret=false;if(typeof predicate==="undefined"||predicate===null){ret=sequence.elements.length!==0;}else{for(var i=0;i<sequence.elements.length;i++){if(predicate(sequence.elements[i],i)){ret=true;break;}}}
return ret;};function average(sequence,selector){var sum=sequence.sum(selector);return sum/sequence.elements.length;};function clear(sequence){while(sequence.elements.pop()){}
while(sequence.expressions.pop()){}
return sequence;};function concat(sequence,second){return new Enumerable(sequence.elements.concat(ensureEnumerable(second).elements));};function contains(sequence,element,equalityComparer){var ret=false;if(typeof equalityComparer==="undefined"||equalityComparer===null){equalityComparer=sequence._defaultEqualityComparer;}
for(var i=0;i<sequence.elements.length;i++){if(equalityComparer(sequence.elements[i],element)){ret=true;break;}}
return ret;};function count(sequence,predicate){if(typeof predicate==="undefined"||predicate===null){return sequence.elements.length;}else{var count=0;each(sequence,function(element,index){if(predicate(element,index)){count++;}});return count;}};function copy(sequence){var ret=new Enumerable(sequence.elements);ret.expressions=sequence.expressions.slice();return ret;};function distinct(sequence,equalityComparer){var ret=new Enumerable();each(sequence,function(element){if(!ret.contains(element,equalityComparer)){add(ret,element)}});return ret;};function each(sequence,callback){var elements=sequence.toArray();for(var i=0;i<elements.length;i++){callback(elements[i],i);}
return sequence;};function elementAt(sequence,index){return sequence.elements[index];};function except(sequence,second,equalityComparer){var parameterEnumerable=ensureEnumerable(second);if(typeof equalityComparer==="undefined"||equalityComparer===null){equalityComparer=sequence._defaultEqualityComparer;}
var ret=new Enumerable();each(sequence,function(element){if(!contains(parameterEnumerable,element,equalityComparer)){add(ret,element);}});return ret;};function first(sequence,predicate){if(typeof predicate==="undefined"||predicate===null){return elementAt(sequence,0);}else{for(var i=0;i<sequence.elements.length;i++){var element=sequence.elements[i];if(predicate(element,i)){return element;}}
return undefined;}};function firstOrDefault(sequence,predicate,defaultValue){var ret=first(sequence,predicate);if(typeof ret==="undefined"){ret=defaultValue;}
return ret;};function groupBy(sequence,keySelector,equalityComparer){var ret=new Enumerable();if(typeof equalityComparer==="undefined"||equalityComparer===null){equalityComparer=sequence._defaultEqualityComparer;}
each(sequence,function(element){var currentKey=keySelector(element);var keyToAddTo=currentKey;var index=null;for(var i=0;i<ret.elements.length;i++){var key=ret.elements[i].key;if(equalityComparer(key,currentKey)){keyToAddTo=key;index=i;break;}}
if(index!==null){add(ret.elements[index].values,element);}else{var t=new Enumerable();add(t,element);add(ret,{key:currentKey,values:t});}});return ret;};function indexOf(sequence,item,index,count){if(typeof index==="undefined"||index===null){index=0;}
if(typeof count==="undefined"||count===null){count=sequence.elements.length;}
for(var i=index;i<count;i++){if(item===sequence.elements[i]){return i;}}};function insert(sequence,index,item){if(index>sequence.elements.length&&index<0){throw"Index argument is out of range of Enumerable";}
var first=sequence.elements.slice(0,index);var second=sequence.elements.slice(index,sequence.elements.length);var newItem=[];newItem.push(item);sequence.elements=first.concat(newItem).concat(second);return sequence;};function insertRange(sequence,index,items){if(index>sequence.elements.length&&index<0){throw"Index argument is out of range of Enumerable";}
var first=sequence.elements.slice(0,index);var second=sequence.elements.slice(index,sequence.elements.length);var newItems=ensureEnumerable(items).elements;this.elements=first.concat(newItems).concat(second);return sequence;};function intersect(sequence,second,equalityComparer){var firstDistinct=distinct(sequence,equalityComparer);var secondDistinct=distinct(ensureEnumerable(second),equalityComparer);var ret=new Enumerable();each(sequence,function(firstElement){if(contains(secondDistinct,firstElement,equalityComparer)){add(ret,firstElement);}});return ret;};function last(sequence,predicate){var ret=undefined;if(typeof predicate==="undefined"||predicate===null){ret=sequence.elements[sequence.elements.length-1];}else{each(sequence,function(element,index){if(predicate(element,index)){ret=element;}});}
return ret;};function lastOrDefault(sequence,predicate,defaultValue){var ret=last(sequence,predicate);if(typeof ret==="undefined"){ret=defaultValue;}
return ret;};function max(sequence,selector){if(sequence.elements.length===0){throw"Source contains no elements";}
var ret=Number.MIN_VALUE;if(typeof selector==="undefined"||selector===null){selector=sequence._defaultElementSelector;}
each(sequence,function(item,index){var val=selector(item,index);if(val>ret){ret=val;}});return ret;};function min(sequence,selector){if(sequence.elements.length===0){throw"Source contains no elements";}
var ret=Number.MAX_VALUE;if(typeof selector==="undefined"||selector===null){selector=sequence._defaultElementSelector;}
each(sequence,function(item,index){var val=selector(item,index);if(val<ret){ret=val;}});return ret;};function orderBy(sequence,keySelector,comparer){if(typeof keySelector==="undefined"||keySelector===null){keySelector=sequence._defaultKeySelector;}
if(typeof comparer==="undefined"||comparer===null){comparer=sequence._defaultComparer;}
var ordered=new Enumerable(sequence.elements);ordered.elements.sort(function(a,b){var aKey=keySelector(a);var bKey=keySelector(b);return comparer(aKey,bKey);});return ordered;};function orderByDescending(sequence,keySelector,comparer){var ordered=orderBy(sequence,keySelector,comparer);ordered.elements.reverse();return ordered;};function remove(sequence,item){var index=null;for(var i=0;i<sequence.elements.length;i++){if(sequence.elements[i]===item){index=i;break;}}
return removeAt(sequence,index);};function removeAll(sequence,predicate){var matches=[];each(sequence,function(element,index){if(predicate(element,index)){matches.push(element);}});for(var i=0;i<matches.length;i++){remove(sequence,matches[i]);}
return matches.length;};function removeAt(sequence,index){if(index!==null&&index<sequence.elements.length&&index>=0){var first=sequence.elements.slice(0,index);var second=sequence.elements.slice(index+1,sequence.elements.length);sequence.elements=first.concat(second);return true;}else{return false;}};function removeRange(sequence,index,count){if(count<0){throw"Count is out of range";}
var toRemove=[];var top=index+count;if(top>sequence.elements.length){top=sequence.elements.length;}
for(var i=index;i<top;i++){toRemove.push(sequence.elements[i]);}
var res=false;for(var i=0;i<toRemove.length;i++){res=remove(sequence,toRemove[i]);}
return res;};function reverse(sequence,index,count){if(count<0){throw"Count is out of range";}
if(typeof index==="undefined"||index===null){index=0;}
if(typeof count==="undefined"||count===null){count=sequence.elements.length;}
var first=sequence.elements.slice(0,index);var toReverse=sequence.elements.slice(index,index+count);var last=sequence.elements.slice(index+count,sequence.elements.length);return new Enumerable(first.concat(toReverse.reverse()).concat(last));};function select(sequence,selector){var ret=new Enumerable();each(sequence,function(item,index){add(ret,selector(item,index));});return ret;};function selectMany(sequence,collectionSelector,resultSelector){var ret=new Enumerable();var instance=sequence;if(typeof resultSelector==="undefined"||resultSelector===null){resultSelector=function(collectionItem,resultItem){return resultItem;};}
each(sequence,function(collectionItem,index){var e=ensureEnumerable(collectionSelector(collectionItem,index))
e.each(function(resultItem){var i=4;add(ret,resultSelector(collectionItem,resultItem));});});return ret;};function sequenceEqual(sequence,second,equalityComparer){var secondEnumerable=ensureEnumerable(second);var ret=true;if(sequence.elements.length!==secondEnumerable.elements.length){ret=false;}else{if(typeof equalityComparer==="undefined"||equalityComparer===null){equalityComparer=sequence._defaultEqualityComparer;}
for(var i=0;i<sequence.elements.length;i++){if(!equalityComparer(sequence.elements[i],secondEnumerable.elementAt(i))){ret=false;break;}}}
return ret;};function single(sequence,predicate){if(typeof predicate==="undefined"||predicate===null){if(sequence.elements.length===1){return sequence.elements[0];}}else{var found=where(sequence,predicate);if(found.elements.length===1){return found.elements[0];}}
throw"The sequence should only contain one element";};function skip(sequence,count){var ret=new Enumerable();for(var i=count;i<sequence.elements.length;i++){add(ret,sequence.elements[i]);}
return ret;};function skipWhile(sequence,predicate){var ret=new Enumerable();var startReturning=false;each(sequence,function(item,index){if(!startReturning){if(!predicate(item,index)){startReturning=true;}}
if(startReturning){add(ret,item);}});return ret;};function sum(sequence,selector){var ret=0;if(typeof selector==="undefined"||selector===null){selector=sequence._defaultElementSelector;}
each(sequence,function(item,index){ret+=selector(item,index);});return ret;};function take(sequence,count){if(count>sequence.elements.length){throw"Cannot take more elements than exist";}
var ret=new Enumerable();for(var i=0;i<count;i++){add(ret,sequence.elements[i]);}
return ret;};function takeWhile(sequence,predicate){var ret=new Enumerable();for(var i=0;i<sequence.elements.length;i++){var element=sequence.elements[i];if(predicate(element,i)){add(ret,element);}else{break;}}
return ret;};function toDictionary(selector,keySelector,elementSelector,equalityComparer){if(typeof equalityComparer==="undefined"||equalityComparer===null){equalityComparer=selector._defaultEqualityComparer;}
if(typeof elementSelector==="undefined"||elementSelector===null){elementSelector=selector._defaultElementSelector;}
var ret={};var addedKeys=[];each(selector,function(item){var key=keySelector(item);for(var i=0;i<addedKeys.length;i++){var existingKey=addedKeys[i];if(equalityComparer(key,existingKey)){throw"An item with the same key has already been added.";}}
ret[key]=elementSelector(item);addedKeys.push(key);});delete addedKeys;return ret;};function thenBy(sequence,keySelector,comparer){throw"thenBy is not implemented.";};function thenByDescending(sequence,keySelector,comparer){throw"thenByDescending is not implemented.";};function union(sequence,second,equalityComparer){if(typeof equalityComparer==="undefined"||equalityComparer===null){equalityComparer=sequence._defaultEqualityComparer;}
var ret=new Enumerable();each(sequence,function(item){if(!contains(ret,item,equalityComparer)){add(ret,item);}});ensureEnumerable(second).each(function(item){if(!contains(ret,item,equalityComparer)){add(ret,item);}});return ret;};function where(sequence,predicate){var ret=new Enumerable();each(sequence,function(item){if(predicate(item)){add(ret,item);}});return ret;}
Enumerable.fn=Enumerable.prototype={_defaultEqualityComparer:function(element1,element2){return element1===element2;},_defaultKeySelector:function(element){return element;},_defaultElementSelector:function(item,index){return item;},_defaultComparer:function(element1,element2){if(element1===element2){return 0;}
if(typeof element1==="undefined"||element1===null){return-1}
if(typeof element1==="undefined"||element1===null){return 1;}
if(element1<element2){return-1;}else if(element2<element1){return 1;}},init:function(array){if(typeof array==="undefined"||array===null){array=[];}
this.elements=array.slice();this.expressions=[];return this;},add:function(element){var t=this.execute();add(t,element);this.elements=t.elements;},addRange:function(elements){var t=this.execute();addRange(t,elements);this.elements=t.elements;},all:function(predicate){return all(this.execute(),predicate);},any:function(predicate){return any(this.execute(),predicate);},average:function(selector){return average(this.execute(),selector);},clear:function(){clear.call(this,this);},concat:function(second){return addExpression(this,concat,[second]);},contains:function(element,equalityComparer){return contains(this.execute(),element,equalityComparer);},count:function(predicate){return count(this.execute(),predicate);},copy:function(){return copy(this);},distinct:function(equalityComparer){return addExpression(this,distinct,[equalityComparer]);},each:function(callback){return each(new Enumerable(this.toArray()),callback);},elementAt:function(index){return elementAt(this.execute(),index);},except:function(second,equalityComparer){return addExpression(this,except,[second,equalityComparer]);},execute:function(){return ensureEnumerable(this.toArray());},first:function(predicate){return first(this.execute(),predicate);},firstOrDefault:function(predicate,defaultValue){return firstOrDefault(this.execute(),predicate,defaultValue);},groupBy:function(keySelector,equalityComparer){return addExpression(this,groupBy,[keySelector,equalityComparer]);},indexOf:function(item,index,count){return indexOf(this.execute(),item,index,count);},insert:function(index,item){return addExpression(this,insert,[index,item]);},insertRange:function(index,items){return addExpression(this,insertRange,[index,items]);},intersect:function(second,equalityComparer){return addExpression(this,intersect,[second,equalityComparer]);},last:function(predicate){return last(this.execute(),predicate);},lastOrDefault:function(predicate,defaultValue){return lastOrDefault(this.execute(),predicate,defaultValue);},max:function(selector){return max(this.execute(),selector);},min:function(selector){return min(this.execute(),selector);},orderBy:function(keySelector,comparer){var ret=addExpression(this,orderBy,[keySelector,comparer]);return ret;},orderByDescending:function(keySelector,comparer){return addExpression(this,orderByDescending,[keySelector,comparer]);},remove:function(item){var t=this.execute();var res=remove(t,item);this.elements=t.elements;return res;},removeAll:function(predicate){var t=this.execute();var res=removeAll(t,predicate);this.elements=t.elements;return res;},removeAt:function(index){var t=this.execute();var res=removeAt(t,index);this.elements=t.elements;return res;},removeRange:function(index,count){var t=this.execute();var res=removeRange(t,index,count);this.elements=t.elements;return res;},reverse:function(index,count){return addExpression(this,reverse,[index,count]);},select:function(selector){return addExpression(this,select,[selector]);},selectMany:function(collectionSelector,resultSelector){return addExpression(this,selectMany,[collectionSelector,resultSelector]);},sequenceEqual:function(second,equalityComparer){return sequenceEqual(this.execute(),second,equalityComparer);},single:function(predicate){return single(this.execute(),predicate);},skip:function(count){return addExpression(this,skip,[count]);},skipWhile:function(predicate){return addExpression(this,skipWhile,[predicate]);},sum:function(selector){return sum(this.execute(),selector);},take:function(count){return addExpression(this,take,[count]);},takeWhile:function(predicate){return addExpression(this,takeWhile,[predicate]);},toArray:function(){return parseExpressions.call(this,this).elements;},toDictionary:function(keySelector,elementSelector,equalityComparer){return toDictionary(this.execute(),keySelector,elementSelector,equalityComparer);},union:function(second,equalityComparer){return addExpression(this,union,[second,equalityComparer]);},where:function(predicate){return addExpression(this,where,[predicate]);}}
Array.prototype.all=function(predicate){return new Enumerable(this).all(predicate);};Array.prototype.any=function(predicate){return new Enumerable(this).any(predicate);};Array.prototype.contains=function(element,equalityComparer){return(new Enumerable(this).contains(element,equalityComparer));};Array.prototype.distinct=function(equalityComparer){return new Enumerable(this).distinct(equalityComparer);};Array.prototype.each=function(callback){return new Enumerable(this).each(callback);};Array.prototype.except=function(second,equalityComparer){return new Enumerable(this).except(second,equalityComparer);};Array.prototype.groupBy=function(keySelector,equalityComparer){return new Enumerable(this).groupBy(keySelector,equalityComparer);};Array.prototype.intersect=function(second,equalityComparer){return new Enumerable(this).intersect(second,equalityComparer);};Array.prototype.orderBy=function(keySelector,comparer){return new Enumerable(this).orderBy(keySelector,comparer);};Array.prototype.orderByDescending=function(keySelector,comparer){return new Enumerable(this).orderByDescending(keySelector,comparer);};Array.prototype.select=function(selector){return new Enumerable(this).select(selector);};Array.prototype.selectMany=function(collectionSelector,resultSelector){return new Enumerable(this).selectMany(collectionSelector,resultSelector);};Array.prototype.sequenceEqual=function(second,equalityComparer){return new Enumerable(this).sequenceEqual(second,equalityComparer);};Array.prototype.union=function(second,equalityComparer){return new Enumerable(this).union(second,equalityComparer);};Array.prototype.where=function(predicate){return new Enumerable(this).where(predicate);};Enumerable.fromDictionary=function(dictionary){var enumerable=new Enumerable();for(var keyName in dictionary){enumerable.add({key:keyName,value:dictionary[keyName]});}
return enumerable;};Enumerable.range=function(start,count){if(count<0){throw"Count is out of range.";}
var ret=new Enumerable();for(var i=start;i<start+count;i++){ret.add(i);}
return ret;};Enumerable.repeat=function(item,count){if(count<0){throw"Count is out of range.";}
var ret=new Enumerable();for(var i=0;i<count;i++){ret.add(item);}
return ret;}
Enumerable.fn.init.prototype=Enumerable.fn;})();